import type { Faker } from '.';
/**
 * Generates random values of different kinds. Some methods are deprecated and have been moved to dedicated modules.
 */
export declare class Random {
    private readonly faker;
    constructor(faker: Faker, seed?: any[] | any);
    /**
     * Returns a single random number between zero and the given max value or the given range with the specified precision.
     * The bounds are inclusive.
     *
     * @param options Maximum value or options object.
     * @param options.min Lower bound for generated number. Defaults to `0`.
     * @param options.max Upper bound for generated number. Defaults to `99999`.
     * @param options.precision Precision of the generated number. Defaults to `1`.
     *
     * @see faker.datatype.number()
     *
     * @example
     * faker.random.number() // 55422
     * faker.random.number(100) // 52
     * faker.random.number({ min: 1000000 }) // 431433
     * faker.random.number({ max: 100 }) // 42
     * faker.random.number({ precision: 0.01 }) // 64246.18
     * faker.random.number({ min: 10, max: 100, precision: 0.01 }) // 36.94
     *
     * @deprecated
     */
    number(options?: number | {
        min?: number;
        max?: number;
        precision?: number;
    }): number;
    /**
     * Returns a single random floating-point number for the given precision or range and precision.
     *
     * @param options Precision or options object.
     * @param options.min Lower bound for generated number. Defaults to `0`.
     * @param options.max Upper bound for generated number. Defaults to `99999`.
     * @param options.precision Precision of the generated number. Defaults to `0.01`.
     *
     * @see faker.datatype.float()
     *
     * @example
     * faker.random.float() // 51696.36
     * faker.random.float(0.1) // 52023.2
     * faker.random.float({ min: 1000000 }) // 212859.76
     * faker.random.float({ max: 100 }) // 28.11
     * faker.random.float({ precision: 0.1 }) // 84055.3
     * faker.random.float({ min: 10, max: 100, precision: 0.001 }) // 57.315
     *
     * @deprecated
     */
    float(options?: number | {
        min?: number;
        max?: number;
        precision?: number;
    }): number;
    /**
     * Returns random element from the given array.
     *
     * @param array Array to pick the value from. Defaults to `['a', 'b', 'c']`.
     *
     * @example
     * faker.random.arrayElement() // 'b'
     * faker.random.arrayElement(['cat', 'dog', 'mouse']) // 'dog'
     */
    arrayElement<T = string>(array?: ReadonlyArray<T>): T;
    /**
     * Returns a subset with random elements of the given array in random order.
     *
     * @param array Array to pick the value from. Defaults to `['a', 'b', 'c']`.
     * @param count Number of elements to pick.
     *    When not provided, random number of elements will be picked.
     *    When value exceeds array boundaries, it will be limited to stay inside.
     *
     * @example
     * faker.random.arrayElements() // ['b', 'c']
     * faker.random.arrayElements(['cat', 'dog', 'mouse']) // ['mouse', 'cat']
     * faker.random.arrayElements([1, 2, 3, 4, 5], 2) // [4, 2]
     */
    arrayElements<T>(array?: ReadonlyArray<T>, count?: number): T[];
    /**
     * Returns a random key or value from given object.
     *
     * @param object
     * @param field
     */
    objectElement<T extends Record<string, unknown>, K extends keyof T>(object: T, field: 'key'): K;
    objectElement<T extends Record<string, unknown>, K extends keyof T>(object: T, field?: unknown): T[K];
    /**
     * Returns a UUID v4 ([Universally Unique Identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)).
     *
     * @see faker.datatype.uuid()
     *
     * @example
     * faker.random.uuid() // '4136cd0b-d90b-4af7-b485-5d1ded8db252'
     *
     * @deprecated
     */
    uuid(): string;
    /**
     * Returns the boolean value true or false.
     *
     * @see faker.datatype.boolean()
     *
     * @example
     * faker.random.boolean() // false
     *
     * @deprecated
     */
    boolean(): boolean;
    /**
     * Returns random word.
     *
     * @example
     * faker.random.word() // 'Seamless'
     */
    word(): string;
    /**
     * Returns string with set of random words.
     *
     * @param count Number of words. Defaults to a random value between `1` and `3`.
     *
     * @example
     * faker.random.words() // 'neural'
     * faker.random.words(5) // 'copy Handcrafted bus client-server Point'
     */
    words(count?: number): string;
    /**
     * locale
     *
     * @deprecated
     */
    image(): string;
    /**
     * locale
     */
    locale(): string;
    /**
     * alpha. returns lower/upper alpha characters based count and upcase options
     *
     * @param options // defaults to { count: 1, upcase: false, bannedChars: [] }
     */
    alpha(options?: number | {
        count?: number;
        upcase?: boolean;
        bannedChars?: string[];
    }): string;
    /**
     * alphaNumeric
     *
     * @param count defaults to 1
     * @param options // defaults to { bannedChars: [] }
     * @param options.bannedChars array of characters which should be banned in new string
     */
    alphaNumeric(count?: number, options?: {
        bannedChars?: string[];
    }): string;
    /**
     * hexaDecimal
     *
     * @param count defaults to 1
     *
     * @deprecated
     */
    hexaDecimal(count?: number): string;
}
