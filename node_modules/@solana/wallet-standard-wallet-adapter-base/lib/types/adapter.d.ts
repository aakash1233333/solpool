import type { SendTransactionOptions, SupportedTransactionVersions, WalletAdapter, WalletName } from '@solana/wallet-adapter-base';
import { BaseWalletAdapter, WalletReadyState } from '@solana/wallet-adapter-base';
import type { SolanaSignAndSendTransactionFeature, SolanaSignMessageFeature, SolanaSignTransactionFeature } from '@solana/wallet-standard-features';
import type { Connection, TransactionSignature } from '@solana/web3.js';
import { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';
import type { Wallet, WalletWithFeatures } from '@wallet-standard/base';
import type { ConnectFeature, DisconnectFeature, EventsFeature } from '@wallet-standard/features';
/** TODO: docs */
export declare type WalletAdapterCompatibleWallet = WalletWithFeatures<ConnectFeature & EventsFeature & (SolanaSignAndSendTransactionFeature | SolanaSignTransactionFeature) & (DisconnectFeature | SolanaSignMessageFeature | never)>;
/** TODO: docs */
export declare function isWalletAdapterCompatibleWallet(wallet: Wallet): wallet is WalletAdapterCompatibleWallet;
/** TODO: docs */
export interface StandardWalletAdapterConfig {
    wallet: WalletAdapterCompatibleWallet;
}
/** TODO: docs */
export declare type StandardAdapter = WalletAdapter & {
    wallet: WalletAdapterCompatibleWallet;
    standard: true;
};
/** TODO: docs */
export declare class StandardWalletAdapter extends BaseWalletAdapter implements StandardAdapter {
    #private;
    get supportedTransactionVersions(): SupportedTransactionVersions;
    get name(): WalletName<string>;
    get icon(): `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    get url(): string;
    get publicKey(): PublicKey | null;
    get connecting(): boolean;
    get readyState(): WalletReadyState;
    get wallet(): WalletAdapterCompatibleWallet;
    get standard(): true;
    constructor({ wallet }: StandardWalletAdapterConfig);
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    sendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, connection: Connection, options?: SendTransactionOptions): Promise<TransactionSignature>;
    signTransaction: (<T extends Transaction | VersionedTransaction>(transaction: T) => Promise<T>) | undefined;
    signAllTransactions: (<T extends Transaction | VersionedTransaction>(transaction: T[]) => Promise<T[]>) | undefined;
    signMessage: ((message: Uint8Array) => Promise<Uint8Array>) | undefined;
}
//# sourceMappingURL=adapter.d.ts.map