import type { Wallet } from '@wallet-standard/base';
/** TODO: docs */
export interface Wallets {
    /**
     * TODO: docs
     */
    register(...wallets: Wallet[]): () => void;
    /**
     * TODO: docs
     */
    get(): ReadonlyArray<Wallet>;
    /**
     * TODO: docs
     */
    on<E extends WalletsEventNames = WalletsEventNames>(event: E, listener: WalletsEvents[E]): () => void;
}
/** TODO: docs */
export interface WalletsEvents {
    /**
     * Emitted when wallets are registered.
     *
     * @param wallets Wallets that were registered.
     */
    register(...wallets: Wallet[]): void;
    /**
     * Emitted when wallets are unregistered.
     *
     * @param wallets Wallets that were unregistered.
     */
    unregister(...wallets: Wallet[]): void;
}
/** TODO: docs */
export declare type WalletsEventNames = keyof WalletsEvents;
/**
 * TODO: docs
 */
export declare function getWallets(): Wallets;
/** @deprecated */
export declare function DEPRECATED_getWallets(): Wallets;
//# sourceMappingURL=wallets.d.ts.map