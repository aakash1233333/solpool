/** TODO: docs */
export function bytesEqual(a, b) {
    return arraysEqual(a, b);
}
/** TODO: docs */
export function arraysEqual(a, b) {
    if (a === b)
        return true;
    const length = a.length;
    if (length !== b.length)
        return false;
    for (let i = 0; i < length; i++) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
/** TODO: docs */
export function concatBytes(first, ...others) {
    const length = others.reduce((length, bytes) => length + bytes.length, first.length);
    const bytes = new Uint8Array(length);
    bytes.set(first, 0);
    for (const other of others) {
        bytes.set(other, bytes.length);
    }
    return bytes;
}
/** TODO: docs */
export function pick(object, ...keys) {
    const picked = {};
    for (const key of keys) {
        picked[key] = object[key];
    }
    return picked;
}
/** TODO: docs */
export function guard(callback) {
    try {
        callback();
    }
    catch (error) {
        console.error(error);
    }
}
//# sourceMappingURL=util.js.map