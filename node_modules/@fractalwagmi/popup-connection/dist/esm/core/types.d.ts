export declare enum PopupEvent {
    PROJECT_APPROVED = "PROJECT_APPROVED",
    HANDSHAKE = "HANDSHAKE",
    HANDSHAKE_ACK = "HANDSHAKE_ACK",
    SIGNED_TRANSACTION = "SIGNED_TRANSACTION",
    FAILED_TO_SIGN_TRANSACTION = "FAILED_TO_SIGN_TRANSACTION",
    TRANSACTION_DENIED = "TRANSACTION_DENIED",
    SOLANA_WALLET_ADAPTER_APPROVED = "SOLANA_WALLET_ADAPTER_APPROVED",
    SOLANA_WALLET_ADAPTER_DENIED = "SOLANA_WALLET_ADAPTER_DENIED",
    POPUP_CLOSED = "POPUP_CLOSED",
    TRANSACTION_SIGNATURE_NEEDED = "TRANSACTION_SIGNATURE_NEEDED",
    TRANSACTION_SIGNATURE_NEEDED_RESPONSE = "TRANSACTION_SIGNATURE_NEEDED_RESPONSE",
    AUTH_LOADED = "AUTH_LOADED",
    MESSAGE_SIGNATURE_NEEDED = "MESSAGE_SIGNATURE_NEEDED",
    MESSAGE_SIGNATURE_NEEDED_RESPONSE = "MESSAGE_SIGNATURE_NEEDED_RESPONSE"
}
export declare enum Platform {
    UNKNOWN = "UNKNOWN",
    REACT_SDK = "REACT_SDK",
    SOLANA_WALLET_ADAPTER = "SOLANA_WALLET_ADAPTER"
}
export declare type EventCallback = (payload: unknown) => void;
export interface SendParams {
    event: PopupEvent;
    payload?: Record<string, unknown>;
}
export interface PopupConnection {
    off: (e: PopupEvent, callback: EventCallback) => void;
    on: (e: PopupEvent, callback: EventCallback) => void;
    send: (params: SendParams) => void;
    validatedOrigin: string;
}
//# sourceMappingURL=types.d.ts.map