import { Connection } from "./core/connection.js";
import { DEFAULT_POPUP_HEIGHT_PX, DEFAULT_POPUP_WIDTH_PX, } from "./core/constants.js";
import { PopupEvent } from "./core/types.js";
import { openPopup, validateOrigin } from "./core/utils.js";
export class ConnectionManager {
    constructor(platform) {
        this.platform = platform;
        this.connection = null;
        this.popupWindow = null;
        this.handleMessage = (e) => {
            var _a, _b;
            if (!validateOrigin(e.origin)) {
                return;
            }
            const validatedOrigin = e.origin;
            if (!this.popupWindow) {
                return;
            }
            if (e.data.event === PopupEvent.HANDSHAKE && !this.connection) {
                if (!this.verifyAndResetNonce((_a = e.data.payload) === null || _a === void 0 ? void 0 : _a.nonce)) {
                    return;
                }
                this.popupWindow.postMessage({
                    event: PopupEvent.HANDSHAKE_ACK,
                    payload: {
                        platform: this.platform,
                    },
                }, validatedOrigin);
                this.connection = new Connection(validatedOrigin, this.popupWindow);
                (_b = this.connectionUpdatedCallback) === null || _b === void 0 ? void 0 : _b.call(this, this.connection);
            }
            if (!this.connection) {
                return;
            }
            this.connection.runHandlersForEvent(e.data.event, e.data.payload);
            if (e.data.event === PopupEvent.POPUP_CLOSED && this.connection) {
                this.resetConnection();
                this.popupWindow = null;
            }
        };
    }
    initialize() {
        window.addEventListener('message', this.handleMessage);
        return this;
    }
    tearDown() {
        window.removeEventListener('message', this.handleMessage);
        this.resetConnection();
        return this;
    }
    open({ url, widthPx = DEFAULT_POPUP_WIDTH_PX, heightPx = DEFAULT_POPUP_HEIGHT_PX, nonce, }) {
        var _a;
        if ((_a = this.popupWindow) === null || _a === void 0 ? void 0 : _a.closed) {
            this.resetConnectionAndPopupWindow();
        }
        if (this.popupWindow) {
            return;
        }
        this.initialize();
        if (nonce) {
            this.nonce = nonce;
        }
        const left = window.screenX + (window.innerWidth - widthPx) / 2;
        const top = window.screenY + (window.innerHeight - heightPx) / 2;
        this.popupWindow = openPopup({
            height: heightPx,
            left,
            top,
            url,
            width: widthPx,
        });
    }
    close() {
        if (!this.popupWindow) {
            return;
        }
        this.popupWindow.close();
        this.resetConnectionAndPopupWindow();
    }
    onConnectionUpdated(callback) {
        this.connectionUpdatedCallback = callback;
        return this;
    }
    getConnection() {
        return this.connection;
    }
    resetConnectionAndPopupWindow() {
        this.resetConnection();
        this.popupWindow = null;
    }
    resetConnection() {
        var _a, _b;
        (_a = this.connection) === null || _a === void 0 ? void 0 : _a.resetHandlers();
        this.connection = null;
        (_b = this.connectionUpdatedCallback) === null || _b === void 0 ? void 0 : _b.call(this, this.connection);
    }
    verifyAndResetNonce(uncheckedNonce) {
        if (!this.nonce) {
            return true;
        }
        const result = uncheckedNonce === this.nonce;
        if (result) {
            this.nonce = undefined;
        }
        return result;
    }
}
//# sourceMappingURL=connection-manager.js.map