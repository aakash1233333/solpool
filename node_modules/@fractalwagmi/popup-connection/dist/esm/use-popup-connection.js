import { ConnectionManager } from "./connection-manager.js";
import { DEFAULT_POPUP_WIDTH_PX, DEFAULT_POPUP_HEIGHT_PX, } from "./core/constants.js";
import { Platform } from "./core/types.js";
import { useCallback, useEffect, useRef, useState } from 'react';
export const usePopupConnection = ({ enabled = true, platform = Platform.UNKNOWN, widthPx = DEFAULT_POPUP_WIDTH_PX, heightPx = DEFAULT_POPUP_HEIGHT_PX, } = {}) => {
    const [exportedConnection, setExportedConnection] = useState(undefined);
    const connectionManagerRef = useRef(new ConnectionManager(platform).onConnectionUpdated((connection) => {
        setExportedConnection(connection === null || connection === void 0 ? void 0 : connection.export());
    }));
    const open = useCallback((url) => {
        connectionManagerRef.current.open({
            heightPx,
            url,
            widthPx,
        });
    }, [connectionManagerRef, widthPx, heightPx]);
    const close = useCallback(() => {
        connectionManagerRef.current.close();
    }, [connectionManagerRef]);
    useEffect(() => {
        if (enabled) {
            connectionManagerRef.current.initialize();
        }
        else {
            connectionManagerRef.current.tearDown();
        }
    }, [connectionManagerRef]);
    return {
        close,
        connection: exportedConnection,
        open,
    };
};
//# sourceMappingURL=use-popup-connection.js.map