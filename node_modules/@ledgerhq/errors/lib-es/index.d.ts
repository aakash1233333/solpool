import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, LedgerErrorConstructor } from "./helpers";
export { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, };
export declare const AccountNameRequiredError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const AccountNotSupported: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const AmountRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const BluetoothRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const BtcUnmatchedApp: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const CantOpenDevice: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const CashAddrNotSupported: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const CurrencyNotSupported: LedgerErrorConstructor<{
    currencyName: string;
}>;
export declare const DeviceAppVerifyNotSupported: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceGenuineSocketEarlyClose: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceNotGenuineError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceOnDashboardExpected: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceOnDashboardUnexpected: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceInOSUExpected: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceHalted: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceNameInvalid: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceSocketFail: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceSocketNoBulkStatus: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DisconnectedDevice: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DisconnectedDeviceDuringOperation: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceExtractOnboardingStateError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceOnboardingStatePollingError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const EnpointConfigError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const EthAppPleaseEnableContractData: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const FeeEstimationFailed: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const FirmwareNotRecognized: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const HardResetFail: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const InvalidXRPTag: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const InvalidAddress: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const InvalidAddressBecauseDestinationIsAlsoSource: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LatestMCUInstalledError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UnknownMCU: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LedgerAPIError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LedgerAPIErrorWithMessage: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LedgerAPINotAvailable: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerAppAlreadyInstalledError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerAppRelyOnBTCError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerAppDepInstallRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerAppDepUninstallRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerDeviceLockedError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerFirmwareNotEnoughSpaceError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerNotEnoughSpaceError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ManagerUninstallBTCDep: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NetworkDown: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NoAddressesFound: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotEnoughBalance: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotEnoughBalanceToDelegate: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotEnoughBalanceInParentAccount: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotEnoughSpendableBalance: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotEnoughBalanceBecauseDestinationNotCreated: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NoAccessToCamera: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotEnoughGas: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NotSupportedLegacyAddress: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const GasLessThanEstimate: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PriorityFeeTooLow: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PriorityFeeTooHigh: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PriorityFeeHigherThanMaxFee: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const MaxFeeTooLow: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PasswordsDontMatchError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PasswordIncorrectError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const RecommendSubAccountsToEmpty: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const RecommendUndelegation: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const TimeoutTagged: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UnexpectedBootloader: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const MCUNotGenuineToDashboard: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const RecipientRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UnavailableTezosOriginatedAccountReceive: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UnavailableTezosOriginatedAccountSend: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UpdateFetchFileFail: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UpdateIncorrectHash: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UpdateIncorrectSig: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UpdateYourApp: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UserRefusedDeviceNameChange: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UserRefusedAddress: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UserRefusedFirmwareUpdate: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UserRefusedAllowManager: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const UserRefusedOnDevice: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const TransportOpenUserCancelled: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const TransportInterfaceNotAvailable: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const TransportRaceCondition: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const TransportWebUSBGestureRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DeviceShouldStayInApp: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const WebsocketConnectionError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const WebsocketConnectionFailed: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const WrongDeviceForAccount: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const WrongAppForCurrency: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const ETHAddressNonEIP: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const CantScanQRCode: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const FeeNotLoaded: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const FeeRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const FeeTooHigh: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DustLimit: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PendingOperation: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const SyncError: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const PairingFailed: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const GenuineCheckFailed: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LedgerAPI4xx: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LedgerAPI5xx: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const FirmwareOrAppUpdateRequired: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const LanguageNotFound: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const NoDBPathGiven: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DBWrongPassword: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
export declare const DBNotReset: LedgerErrorConstructor<{
    [key: string]: unknown;
}>;
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */
export declare class TransportError extends Error {
    id: string;
    constructor(message: string, id: string);
}
export declare const StatusCodes: {
    PIN_REMAINING_ATTEMPTS: number;
    INCORRECT_LENGTH: number;
    MISSING_CRITICAL_PARAMETER: number;
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: number;
    SECURITY_STATUS_NOT_SATISFIED: number;
    CONDITIONS_OF_USE_NOT_SATISFIED: number;
    INCORRECT_DATA: number;
    NOT_ENOUGH_MEMORY_SPACE: number;
    REFERENCED_DATA_NOT_FOUND: number;
    FILE_ALREADY_EXISTS: number;
    INCORRECT_P1_P2: number;
    INS_NOT_SUPPORTED: number;
    CLA_NOT_SUPPORTED: number;
    TECHNICAL_PROBLEM: number;
    OK: number;
    MEMORY_PROBLEM: number;
    NO_EF_SELECTED: number;
    INVALID_OFFSET: number;
    FILE_NOT_FOUND: number;
    INCONSISTENT_FILE: number;
    ALGORITHM_NOT_SUPPORTED: number;
    INVALID_KCV: number;
    CODE_NOT_INITIALIZED: number;
    ACCESS_CONDITION_NOT_FULFILLED: number;
    CONTRADICTION_SECRET_CODE_STATUS: number;
    CONTRADICTION_INVALIDATION: number;
    CODE_BLOCKED: number;
    MAX_VALUE_REACHED: number;
    GP_AUTH_FAILED: number;
    LICENSING: number;
    HALTED: number;
    LOCKED_DEVICE: number;
};
export declare function getAltStatusMessage(code: number): string | undefined | null;
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */
export declare function TransportStatusError(statusCode: number): void;
export declare namespace TransportStatusError {
    var prototype: Error;
}
//# sourceMappingURL=index.d.ts.map