import { deserializeError, serializeError } from "./helpers";
describe("resiliency of deserializeError", function () {
    [
        0,
        1,
        "",
        "foo",
        null,
        undefined,
        false,
        true,
        Symbol("bro"),
        {},
        { name: "foo" },
        { name: "foo", stack: "" },
    ].forEach(function (value) {
        it("should never crashes whatever the value is " + JSON.stringify(value), function () {
            expect(function () { return deserializeError(value); }).not.toThrow();
        });
    });
});
describe("resiliency of serializeError", function () {
    [
        0,
        1,
        "",
        "foo",
        null,
        undefined,
        false,
        true,
        Symbol("bro"),
        {},
        { name: "foo" },
        { name: "foo", stack: "" },
    ].forEach(function (value) {
        it("should never crashes whatever the value is " + JSON.stringify(value), function () {
            expect(function () { return serializeError(value); }).not.toThrow();
        });
    });
});
//# sourceMappingURL=deserializeError.test.js.map